/**
 * @author    ThemePunch <info@themepunch.com>
 * @link      http://www.themepunch.com/
 * @copyright 2017 ThemePunch
 */
 
;(function($) {

	if(!$) return;

	var throwSpeed,
		actions,
		objData;

	
	function initSettings() {
				
		document.getElementById("panorama_controls").addEventListener('change', function() {
			
			var display = this.value !== 'throw' ? 'none' : 'block';
			if(!throwSpeed) throwSpeed = document.getElementById('panorama-throw-speed');
			throwSpeed.style.display = display;
			
		});
					
		$('.panorama-min-max').change(function() {
			
			var min = parseInt(this.getAttribute('data-min'), 10),
			max = parseInt(this.getAttribute('data-max'), 10),
			val = parseInt(this.value, 10);
			
			if(isNaN(val)) val = 0;
			if(val < min || val > max) val = parseInt(this.getAttribute('data-orig'), 10);
			this.value = val;
			
		});
		
	}
	
	function initLayers() {
		
		$('body').on('change', '.layer_actions', function() {
			
			if(this.value.search('panorama') !== -1) {
				
				var display = this.value.search(/zoom|end/) === -1 ? 'show' : 'hide';
				$(this).closest('.layer_action_wrap').find('.panorama-action')[display]();
				
			}
			else {
				
				$(this).closest('.layer_action_wrap').find('.panorama-action').hide();
				
			}
			
		});
		
	}
	
	function onWrite() {
		
		actions[actions.length] = this.options[this.selectedIndex].value;
		
	}
	
	function updateEvents() {
		
		if(this.className.search('panorama-ammended') !== -1) return;
		
		var $this = $(this).addClass('panorama-ammended'),
			action = $this.find('select[name="layer_tooltip_event[]"]'),
			opt1 = document.createElement('option'),
			opt2 = document.createElement('option');
			
		opt1.value = 'mousedown';
		opt2.value = 'mouseup';
		
		opt1.innerHTML = 'Mouse Down';
		opt2.innerHTML = 'Mouse Up';
		
		action.append([opt1, opt2]);
		
	}
	
	function write(obj) {
		
		objData = obj;
		actions = [];
		
		$('.layer_action_wrap').each(updateEvents);
		$('.panorama-action-input').each(onWrite);
		
		objData.layer_action.panorama_amount = actions;
		return objData;
		
	}
	
	function read(data, obj, key) {
		
		var evt = data.tooltip_event;
		setTimeout(function() {
		
			var $this = $('.layer_action_wrap').eq(key),
				action = $this.find('select[name="layer_tooltip_event[]"]');
			
			updateEvents.call($this[0]);	
			action.val(evt);
			
			action.find('option:selected').prop('selected', false);
			action.find('option[value="' + evt + '"]').prop('selected', true);
		
		}, 100);
		
		if(data.action.search('panorama') !== -1) {
			
			var prop = obj.layer_action.panorama_amount;
			data.panorama_amount = prop ? prop[key] || '10' : '10';
			
		}
		
		return data;
		
	}
	
	$(function() {
		
		if(typeof RsAddonPanorama === 'undefined' || typeof UniteAdminRev === 'undefined' || typeof UniteLayersRev === 'undefined') {
			
			// addon not enabled for this slider or something broke
			return;
			
		}
		
		var url = document.URL.split('id=');
		if(url.length === 2 && url[1].search('static') !== -1) {
				
			$('#rs-addon-settings-trigger-panorama').parent().hide();
			if($('#rs-addon-wrapper-button-row').children('.rs-layer-toolbar-box').length === 2) $('li[data-content="#slide-addon-wrapper"]').hide();
			
		}
		else {
			
			initSettings();
			
		}
		
		initLayers();
		
		var callbacks = UniteLayersRev.addon_callbacks;
		
		// WRITE
		callbacks[callbacks.length] = {
			
			environment       : 'updateLayerFromFields_Core',
			function_position : 'end',
			callback          : function(obj) {
				
				return write(obj);
				
			}
			
		};
		
		// READ
		callbacks[callbacks.length] = {
			
			environment       : 'add_layer_actions',
			function_position : 'data_definition',
			callback          : function(data, obj, key) {
				
				return read(data, obj, key);
				
			}
			
		};
		
	});


})(typeof jQuery !== 'undefined' ? jQuery : false);


















